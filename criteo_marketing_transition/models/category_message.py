# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CategoryMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_hash_code': 'int',
        'category_name': 'str',
        'catalog_id': 'int',
        'catalog_name': 'str',
        'advertiser_id': 'int',
        'advertiser_name': 'str',
        'campaign_id': 'int',
        'campaign_name': 'str',
        'average_price': 'float',
        'number_of_products': 'int',
        'category_bid': 'BidMessage',
        'enabled': 'bool'
    }

    attribute_map = {
        'category_hash_code': 'categoryHashCode',
        'category_name': 'categoryName',
        'catalog_id': 'catalogId',
        'catalog_name': 'catalogName',
        'advertiser_id': 'advertiserId',
        'advertiser_name': 'advertiserName',
        'campaign_id': 'campaignId',
        'campaign_name': 'campaignName',
        'average_price': 'averagePrice',
        'number_of_products': 'numberOfProducts',
        'category_bid': 'categoryBid',
        'enabled': 'enabled'
    }

    def __init__(self, category_hash_code=None, category_name=None, catalog_id=None, catalog_name=None, advertiser_id=None, advertiser_name=None, campaign_id=None, campaign_name=None, average_price=None, number_of_products=None, category_bid=None, enabled=None):  # noqa: E501
        """CategoryMessage - a model defined in OpenAPI"""  # noqa: E501

        self._category_hash_code = None
        self._category_name = None
        self._catalog_id = None
        self._catalog_name = None
        self._advertiser_id = None
        self._advertiser_name = None
        self._campaign_id = None
        self._campaign_name = None
        self._average_price = None
        self._number_of_products = None
        self._category_bid = None
        self._enabled = None
        self.discriminator = None

        if category_hash_code is not None:
            self.category_hash_code = category_hash_code
        if category_name is not None:
            self.category_name = category_name
        if catalog_id is not None:
            self.catalog_id = catalog_id
        if catalog_name is not None:
            self.catalog_name = catalog_name
        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if advertiser_name is not None:
            self.advertiser_name = advertiser_name
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if average_price is not None:
            self.average_price = average_price
        if number_of_products is not None:
            self.number_of_products = number_of_products
        if category_bid is not None:
            self.category_bid = category_bid
        if enabled is not None:
            self.enabled = enabled

    @property
    def category_hash_code(self):
        """Gets the category_hash_code of this CategoryMessage.  # noqa: E501


        :return: The category_hash_code of this CategoryMessage.  # noqa: E501
        :rtype: int
        """
        return self._category_hash_code

    @category_hash_code.setter
    def category_hash_code(self, category_hash_code):
        """Sets the category_hash_code of this CategoryMessage.


        :param category_hash_code: The category_hash_code of this CategoryMessage.  # noqa: E501
        :type: int
        """

        self._category_hash_code = category_hash_code

    @property
    def category_name(self):
        """Gets the category_name of this CategoryMessage.  # noqa: E501


        :return: The category_name of this CategoryMessage.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this CategoryMessage.


        :param category_name: The category_name of this CategoryMessage.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CategoryMessage.  # noqa: E501


        :return: The catalog_id of this CategoryMessage.  # noqa: E501
        :rtype: int
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CategoryMessage.


        :param catalog_id: The catalog_id of this CategoryMessage.  # noqa: E501
        :type: int
        """

        self._catalog_id = catalog_id

    @property
    def catalog_name(self):
        """Gets the catalog_name of this CategoryMessage.  # noqa: E501


        :return: The catalog_name of this CategoryMessage.  # noqa: E501
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """Sets the catalog_name of this CategoryMessage.


        :param catalog_name: The catalog_name of this CategoryMessage.  # noqa: E501
        :type: str
        """

        self._catalog_name = catalog_name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CategoryMessage.  # noqa: E501


        :return: The advertiser_id of this CategoryMessage.  # noqa: E501
        :rtype: int
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CategoryMessage.


        :param advertiser_id: The advertiser_id of this CategoryMessage.  # noqa: E501
        :type: int
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_name(self):
        """Gets the advertiser_name of this CategoryMessage.  # noqa: E501


        :return: The advertiser_name of this CategoryMessage.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_name

    @advertiser_name.setter
    def advertiser_name(self, advertiser_name):
        """Sets the advertiser_name of this CategoryMessage.


        :param advertiser_name: The advertiser_name of this CategoryMessage.  # noqa: E501
        :type: str
        """

        self._advertiser_name = advertiser_name

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CategoryMessage.  # noqa: E501


        :return: The campaign_id of this CategoryMessage.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CategoryMessage.


        :param campaign_id: The campaign_id of this CategoryMessage.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CategoryMessage.  # noqa: E501


        :return: The campaign_name of this CategoryMessage.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CategoryMessage.


        :param campaign_name: The campaign_name of this CategoryMessage.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def average_price(self):
        """Gets the average_price of this CategoryMessage.  # noqa: E501


        :return: The average_price of this CategoryMessage.  # noqa: E501
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this CategoryMessage.


        :param average_price: The average_price of this CategoryMessage.  # noqa: E501
        :type: float
        """

        self._average_price = average_price

    @property
    def number_of_products(self):
        """Gets the number_of_products of this CategoryMessage.  # noqa: E501


        :return: The number_of_products of this CategoryMessage.  # noqa: E501
        :rtype: int
        """
        return self._number_of_products

    @number_of_products.setter
    def number_of_products(self, number_of_products):
        """Sets the number_of_products of this CategoryMessage.


        :param number_of_products: The number_of_products of this CategoryMessage.  # noqa: E501
        :type: int
        """

        self._number_of_products = number_of_products

    @property
    def category_bid(self):
        """Gets the category_bid of this CategoryMessage.  # noqa: E501


        :return: The category_bid of this CategoryMessage.  # noqa: E501
        :rtype: BidMessage
        """
        return self._category_bid

    @category_bid.setter
    def category_bid(self, category_bid):
        """Sets the category_bid of this CategoryMessage.


        :param category_bid: The category_bid of this CategoryMessage.  # noqa: E501
        :type: BidMessage
        """

        self._category_bid = category_bid

    @property
    def enabled(self):
        """Gets the enabled of this CategoryMessage.  # noqa: E501


        :return: The enabled of this CategoryMessage.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CategoryMessage.


        :param enabled: The enabled of this CategoryMessage.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
