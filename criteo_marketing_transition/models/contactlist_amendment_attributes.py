# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContactlistAmendmentAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'identifier_type': 'str',
        'identifiers': 'list[str]',
        'gum_caller_id': 'int',
        'internal_identifiers': 'bool'
    }

    attribute_map = {
        'operation': 'operation',
        'identifier_type': 'identifierType',
        'identifiers': 'identifiers',
        'gum_caller_id': 'gumCallerId',
        'internal_identifiers': 'internalIdentifiers'
    }

    def __init__(self, operation=None, identifier_type=None, identifiers=None, gum_caller_id=None, internal_identifiers=None):  # noqa: E501
        """ContactlistAmendmentAttributes - a model defined in OpenAPI"""  # noqa: E501

        self._operation = None
        self._identifier_type = None
        self._identifiers = None
        self._gum_caller_id = None
        self._internal_identifiers = None
        self.discriminator = None

        self.operation = operation
        if identifier_type is not None:
            self.identifier_type = identifier_type
        self.identifiers = identifiers
        if gum_caller_id is not None:
            self.gum_caller_id = gum_caller_id
        if internal_identifiers is not None:
            self.internal_identifiers = internal_identifiers

    @property
    def operation(self):
        """Gets the operation of this ContactlistAmendmentAttributes.  # noqa: E501

        Operation to add or remove users  # noqa: E501

        :return: The operation of this ContactlistAmendmentAttributes.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ContactlistAmendmentAttributes.

        Operation to add or remove users  # noqa: E501

        :param operation: The operation of this ContactlistAmendmentAttributes.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def identifier_type(self):
        """Gets the identifier_type of this ContactlistAmendmentAttributes.  # noqa: E501

        What type of identifiers are used  # noqa: E501

        :return: The identifier_type of this ContactlistAmendmentAttributes.  # noqa: E501
        :rtype: str
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """Sets the identifier_type of this ContactlistAmendmentAttributes.

        What type of identifiers are used  # noqa: E501

        :param identifier_type: The identifier_type of this ContactlistAmendmentAttributes.  # noqa: E501
        :type: str
        """

        self._identifier_type = identifier_type

    @property
    def identifiers(self):
        """Gets the identifiers of this ContactlistAmendmentAttributes.  # noqa: E501

        The users tos add or remove, each in the schema specified  # noqa: E501

        :return: The identifiers of this ContactlistAmendmentAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this ContactlistAmendmentAttributes.

        The users tos add or remove, each in the schema specified  # noqa: E501

        :param identifiers: The identifiers of this ContactlistAmendmentAttributes.  # noqa: E501
        :type: list[str]
        """
        if identifiers is None:
            raise ValueError("Invalid value for `identifiers`, must not be `None`")  # noqa: E501

        self._identifiers = identifiers

    @property
    def gum_caller_id(self):
        """Gets the gum_caller_id of this ContactlistAmendmentAttributes.  # noqa: E501

        The Gum caller id of the advertiser patching identifiers of type Gum  # noqa: E501

        :return: The gum_caller_id of this ContactlistAmendmentAttributes.  # noqa: E501
        :rtype: int
        """
        return self._gum_caller_id

    @gum_caller_id.setter
    def gum_caller_id(self, gum_caller_id):
        """Sets the gum_caller_id of this ContactlistAmendmentAttributes.

        The Gum caller id of the advertiser patching identifiers of type Gum  # noqa: E501

        :param gum_caller_id: The gum_caller_id of this ContactlistAmendmentAttributes.  # noqa: E501
        :type: int
        """

        self._gum_caller_id = gum_caller_id

    @property
    def internal_identifiers(self):
        """Gets the internal_identifiers of this ContactlistAmendmentAttributes.  # noqa: E501

        The flag to indicate if identifiers are external or internal  # noqa: E501

        :return: The internal_identifiers of this ContactlistAmendmentAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._internal_identifiers

    @internal_identifiers.setter
    def internal_identifiers(self, internal_identifiers):
        """Sets the internal_identifiers of this ContactlistAmendmentAttributes.

        The flag to indicate if identifiers are external or internal  # noqa: E501

        :param internal_identifiers: The internal_identifiers of this ContactlistAmendmentAttributes.  # noqa: E501
        :type: bool
        """

        self._internal_identifiers = internal_identifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactlistAmendmentAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
