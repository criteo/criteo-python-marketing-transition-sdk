# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdSetGeoLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'countries': 'NillableAdSetTargetingRule',
        'subdivisions': 'NillableAdSetTargetingRule',
        'zip_codes': 'NillableAdSetTargetingRule'
    }

    attribute_map = {
        'countries': 'countries',
        'subdivisions': 'subdivisions',
        'zip_codes': 'zipCodes'
    }

    def __init__(self, countries=None, subdivisions=None, zip_codes=None):  # noqa: E501
        """AdSetGeoLocation - a model defined in OpenAPI"""  # noqa: E501

        self._countries = None
        self._subdivisions = None
        self._zip_codes = None
        self.discriminator = None

        if countries is not None:
            self.countries = countries
        if subdivisions is not None:
            self.subdivisions = subdivisions
        if zip_codes is not None:
            self.zip_codes = zip_codes

    @property
    def countries(self):
        """Gets the countries of this AdSetGeoLocation.  # noqa: E501


        :return: The countries of this AdSetGeoLocation.  # noqa: E501
        :rtype: NillableAdSetTargetingRule
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this AdSetGeoLocation.


        :param countries: The countries of this AdSetGeoLocation.  # noqa: E501
        :type: NillableAdSetTargetingRule
        """

        self._countries = countries

    @property
    def subdivisions(self):
        """Gets the subdivisions of this AdSetGeoLocation.  # noqa: E501


        :return: The subdivisions of this AdSetGeoLocation.  # noqa: E501
        :rtype: NillableAdSetTargetingRule
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """Sets the subdivisions of this AdSetGeoLocation.


        :param subdivisions: The subdivisions of this AdSetGeoLocation.  # noqa: E501
        :type: NillableAdSetTargetingRule
        """

        self._subdivisions = subdivisions

    @property
    def zip_codes(self):
        """Gets the zip_codes of this AdSetGeoLocation.  # noqa: E501


        :return: The zip_codes of this AdSetGeoLocation.  # noqa: E501
        :rtype: NillableAdSetTargetingRule
        """
        return self._zip_codes

    @zip_codes.setter
    def zip_codes(self, zip_codes):
        """Sets the zip_codes of this AdSetGeoLocation.


        :param zip_codes: The zip_codes of this AdSetGeoLocation.  # noqa: E501
        :type: NillableAdSetTargetingRule
        """

        self._zip_codes = zip_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdSetGeoLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
