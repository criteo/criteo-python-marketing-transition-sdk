# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProblemDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trace_identifier': 'str',
        'type': 'str',
        'code': 'str',
        'instance': 'str',
        'title': 'str',
        'detail': 'str',
        'source': 'dict(str, str)',
        'stack_trace': 'str'
    }

    attribute_map = {
        'trace_identifier': 'traceIdentifier',
        'type': 'type',
        'code': 'code',
        'instance': 'instance',
        'title': 'title',
        'detail': 'detail',
        'source': 'source',
        'stack_trace': 'stackTrace'
    }

    def __init__(self, trace_identifier=None, type=None, code=None, instance=None, title=None, detail=None, source=None, stack_trace=None):  # noqa: E501
        """ProblemDetails - a model defined in OpenAPI"""  # noqa: E501

        self._trace_identifier = None
        self._type = None
        self._code = None
        self._instance = None
        self._title = None
        self._detail = None
        self._source = None
        self._stack_trace = None
        self.discriminator = None

        if trace_identifier is not None:
            self.trace_identifier = trace_identifier
        if type is not None:
            self.type = type
        if code is not None:
            self.code = code
        if instance is not None:
            self.instance = instance
        if title is not None:
            self.title = title
        if detail is not None:
            self.detail = detail
        if source is not None:
            self.source = source
        if stack_trace is not None:
            self.stack_trace = stack_trace

    @property
    def trace_identifier(self):
        """Gets the trace_identifier of this ProblemDetails.  # noqa: E501


        :return: The trace_identifier of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._trace_identifier

    @trace_identifier.setter
    def trace_identifier(self, trace_identifier):
        """Sets the trace_identifier of this ProblemDetails.


        :param trace_identifier: The trace_identifier of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._trace_identifier = trace_identifier

    @property
    def type(self):
        """Gets the type of this ProblemDetails.  # noqa: E501


        :return: The type of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProblemDetails.


        :param type: The type of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def code(self):
        """Gets the code of this ProblemDetails.  # noqa: E501


        :return: The code of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProblemDetails.


        :param code: The code of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def instance(self):
        """Gets the instance of this ProblemDetails.  # noqa: E501


        :return: The instance of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ProblemDetails.


        :param instance: The instance of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def title(self):
        """Gets the title of this ProblemDetails.  # noqa: E501


        :return: The title of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProblemDetails.


        :param title: The title of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this ProblemDetails.  # noqa: E501


        :return: The detail of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ProblemDetails.


        :param detail: The detail of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this ProblemDetails.  # noqa: E501


        :return: The source of this ProblemDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ProblemDetails.


        :param source: The source of this ProblemDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._source = source

    @property
    def stack_trace(self):
        """Gets the stack_trace of this ProblemDetails.  # noqa: E501


        :return: The stack_trace of this ProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this ProblemDetails.


        :param stack_trace: The stack_trace of this ProblemDetails.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProblemDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
