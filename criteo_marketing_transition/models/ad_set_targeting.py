# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdSetTargeting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delivery_limitations': 'AdSetDeliveryLimitations',
        'geo_location': 'AdSetGeoLocation',
        'frequency_capping': 'AdSetFrequencyCapping'
    }

    attribute_map = {
        'delivery_limitations': 'deliveryLimitations',
        'geo_location': 'geoLocation',
        'frequency_capping': 'frequencyCapping'
    }

    def __init__(self, delivery_limitations=None, geo_location=None, frequency_capping=None):  # noqa: E501
        """AdSetTargeting - a model defined in OpenAPI"""  # noqa: E501

        self._delivery_limitations = None
        self._geo_location = None
        self._frequency_capping = None
        self.discriminator = None

        if delivery_limitations is not None:
            self.delivery_limitations = delivery_limitations
        if geo_location is not None:
            self.geo_location = geo_location
        if frequency_capping is not None:
            self.frequency_capping = frequency_capping

    @property
    def delivery_limitations(self):
        """Gets the delivery_limitations of this AdSetTargeting.  # noqa: E501


        :return: The delivery_limitations of this AdSetTargeting.  # noqa: E501
        :rtype: AdSetDeliveryLimitations
        """
        return self._delivery_limitations

    @delivery_limitations.setter
    def delivery_limitations(self, delivery_limitations):
        """Sets the delivery_limitations of this AdSetTargeting.


        :param delivery_limitations: The delivery_limitations of this AdSetTargeting.  # noqa: E501
        :type: AdSetDeliveryLimitations
        """

        self._delivery_limitations = delivery_limitations

    @property
    def geo_location(self):
        """Gets the geo_location of this AdSetTargeting.  # noqa: E501


        :return: The geo_location of this AdSetTargeting.  # noqa: E501
        :rtype: AdSetGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this AdSetTargeting.


        :param geo_location: The geo_location of this AdSetTargeting.  # noqa: E501
        :type: AdSetGeoLocation
        """

        self._geo_location = geo_location

    @property
    def frequency_capping(self):
        """Gets the frequency_capping of this AdSetTargeting.  # noqa: E501


        :return: The frequency_capping of this AdSetTargeting.  # noqa: E501
        :rtype: AdSetFrequencyCapping
        """
        return self._frequency_capping

    @frequency_capping.setter
    def frequency_capping(self, frequency_capping):
        """Sets the frequency_capping of this AdSetTargeting.


        :param frequency_capping: The frequency_capping of this AdSetTargeting.  # noqa: E501
        :type: AdSetFrequencyCapping
        """

        self._frequency_capping = frequency_capping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdSetTargeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
