# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdSetSearchFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ad_set_ids': 'list[str]',
        'advertiser_ids': 'list[str]',
        'campaign_ids': 'list[str]'
    }

    attribute_map = {
        'ad_set_ids': 'adSetIds',
        'advertiser_ids': 'advertiserIds',
        'campaign_ids': 'campaignIds'
    }

    def __init__(self, ad_set_ids=None, advertiser_ids=None, campaign_ids=None):  # noqa: E501
        """AdSetSearchFilter - a model defined in OpenAPI"""  # noqa: E501

        self._ad_set_ids = None
        self._advertiser_ids = None
        self._campaign_ids = None
        self.discriminator = None

        if ad_set_ids is not None:
            self.ad_set_ids = ad_set_ids
        if advertiser_ids is not None:
            self.advertiser_ids = advertiser_ids
        if campaign_ids is not None:
            self.campaign_ids = campaign_ids

    @property
    def ad_set_ids(self):
        """Gets the ad_set_ids of this AdSetSearchFilter.  # noqa: E501


        :return: The ad_set_ids of this AdSetSearchFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._ad_set_ids

    @ad_set_ids.setter
    def ad_set_ids(self, ad_set_ids):
        """Sets the ad_set_ids of this AdSetSearchFilter.


        :param ad_set_ids: The ad_set_ids of this AdSetSearchFilter.  # noqa: E501
        :type: list[str]
        """

        self._ad_set_ids = ad_set_ids

    @property
    def advertiser_ids(self):
        """Gets the advertiser_ids of this AdSetSearchFilter.  # noqa: E501


        :return: The advertiser_ids of this AdSetSearchFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._advertiser_ids

    @advertiser_ids.setter
    def advertiser_ids(self, advertiser_ids):
        """Sets the advertiser_ids of this AdSetSearchFilter.


        :param advertiser_ids: The advertiser_ids of this AdSetSearchFilter.  # noqa: E501
        :type: list[str]
        """

        self._advertiser_ids = advertiser_ids

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this AdSetSearchFilter.  # noqa: E501


        :return: The campaign_ids of this AdSetSearchFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this AdSetSearchFilter.


        :param campaign_ids: The campaign_ids of this AdSetSearchFilter.  # noqa: E501
        :type: list[str]
        """

        self._campaign_ids = campaign_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdSetSearchFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
