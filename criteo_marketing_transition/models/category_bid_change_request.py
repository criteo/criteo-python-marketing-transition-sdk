# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CategoryBidChangeRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_hashcode': 'int',
        'bid_value': 'float'
    }

    attribute_map = {
        'category_hashcode': 'categoryHashcode',
        'bid_value': 'bidValue'
    }

    def __init__(self, category_hashcode=None, bid_value=None):  # noqa: E501
        """CategoryBidChangeRequest - a model defined in OpenAPI"""  # noqa: E501

        self._category_hashcode = None
        self._bid_value = None
        self.discriminator = None

        if category_hashcode is not None:
            self.category_hashcode = category_hashcode
        if bid_value is not None:
            self.bid_value = bid_value

    @property
    def category_hashcode(self):
        """Gets the category_hashcode of this CategoryBidChangeRequest.  # noqa: E501


        :return: The category_hashcode of this CategoryBidChangeRequest.  # noqa: E501
        :rtype: int
        """
        return self._category_hashcode

    @category_hashcode.setter
    def category_hashcode(self, category_hashcode):
        """Sets the category_hashcode of this CategoryBidChangeRequest.


        :param category_hashcode: The category_hashcode of this CategoryBidChangeRequest.  # noqa: E501
        :type: int
        """

        self._category_hashcode = category_hashcode

    @property
    def bid_value(self):
        """Gets the bid_value of this CategoryBidChangeRequest.  # noqa: E501


        :return: The bid_value of this CategoryBidChangeRequest.  # noqa: E501
        :rtype: float
        """
        return self._bid_value

    @bid_value.setter
    def bid_value(self, bid_value):
        """Sets the bid_value of this CategoryBidChangeRequest.


        :param bid_value: The bid_value of this CategoryBidChangeRequest.  # noqa: E501
        :type: float
        """

        self._bid_value = bid_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryBidChangeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
