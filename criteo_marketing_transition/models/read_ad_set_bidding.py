# coding: utf-8

"""
    Criteo API Transition Swagger

    This is used to help Criteo clients transition from MAPI to Criteo API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReadAdSetBidding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bid_amount': 'NillableDecimal',
        'bid_strategy': 'str',
        'cost_controller': 'str'
    }

    attribute_map = {
        'bid_amount': 'bidAmount',
        'bid_strategy': 'bidStrategy',
        'cost_controller': 'costController'
    }

    def __init__(self, bid_amount=None, bid_strategy=None, cost_controller=None):  # noqa: E501
        """ReadAdSetBidding - a model defined in OpenAPI"""  # noqa: E501

        self._bid_amount = None
        self._bid_strategy = None
        self._cost_controller = None
        self.discriminator = None

        if bid_amount is not None:
            self.bid_amount = bid_amount
        if bid_strategy is not None:
            self.bid_strategy = bid_strategy
        if cost_controller is not None:
            self.cost_controller = cost_controller

    @property
    def bid_amount(self):
        """Gets the bid_amount of this ReadAdSetBidding.  # noqa: E501


        :return: The bid_amount of this ReadAdSetBidding.  # noqa: E501
        :rtype: NillableDecimal
        """
        return self._bid_amount

    @bid_amount.setter
    def bid_amount(self, bid_amount):
        """Sets the bid_amount of this ReadAdSetBidding.


        :param bid_amount: The bid_amount of this ReadAdSetBidding.  # noqa: E501
        :type: NillableDecimal
        """

        self._bid_amount = bid_amount

    @property
    def bid_strategy(self):
        """Gets the bid_strategy of this ReadAdSetBidding.  # noqa: E501

        The intended optimization for the Ad Set  # noqa: E501

        :return: The bid_strategy of this ReadAdSetBidding.  # noqa: E501
        :rtype: str
        """
        return self._bid_strategy

    @bid_strategy.setter
    def bid_strategy(self, bid_strategy):
        """Sets the bid_strategy of this ReadAdSetBidding.

        The intended optimization for the Ad Set  # noqa: E501

        :param bid_strategy: The bid_strategy of this ReadAdSetBidding.  # noqa: E501
        :type: str
        """

        self._bid_strategy = bid_strategy

    @property
    def cost_controller(self):
        """Gets the cost_controller of this ReadAdSetBidding.  # noqa: E501

        How is spend controlled  # noqa: E501

        :return: The cost_controller of this ReadAdSetBidding.  # noqa: E501
        :rtype: str
        """
        return self._cost_controller

    @cost_controller.setter
    def cost_controller(self, cost_controller):
        """Sets the cost_controller of this ReadAdSetBidding.

        How is spend controlled  # noqa: E501

        :param cost_controller: The cost_controller of this ReadAdSetBidding.  # noqa: E501
        :type: str
        """

        self._cost_controller = cost_controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadAdSetBidding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
